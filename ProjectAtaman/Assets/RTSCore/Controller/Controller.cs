//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/RTSCore/Controller/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""Cursor"",
            ""id"": ""b49a8415-5215-4ae7-914a-45988174db29"",
            ""actions"": [
                {
                    ""name"": ""MainClick"",
                    ""type"": ""Button"",
                    ""id"": ""5d50b4ea-0a08-4cf2-8ffa-9d22eb6fc971"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveClick"",
                    ""type"": ""Button"",
                    ""id"": ""092b55db-1347-40b3-8353-eade692131ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""cb2e20ea-60e1-401b-aeac-73b4c227064b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a8383064-417a-4645-931a-3c7ec0f3157f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""MainClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4d4310a-d167-41a7-9f3d-4c4616224870"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""MoveClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39ea285c-ed59-49f4-81d1-5b261b0ccc69"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HotKeys"",
            ""id"": ""5d8005c2-9b35-420d-bc8d-d23e9040c311"",
            ""actions"": [
                {
                    ""name"": ""IsOrderToQueue"",
                    ""type"": ""Button"",
                    ""id"": ""f0c4997b-1779-4259-ad09-6e4a9713e7a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d1b2cfab-5457-4359-838a-752174a9b59c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""IsOrderToQueue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraControl"",
            ""id"": ""dd36be66-15d2-423d-be68-c7660e3bc844"",
            ""actions"": [
                {
                    ""name"": ""CameraMove"",
                    ""type"": ""Value"",
                    ""id"": ""22f85340-8095-4c69-97ec-3f008fa84f51"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraZoom"",
                    ""type"": ""Value"",
                    ""id"": ""28b1a26a-9e86-4b74-9b09-36fe398b1429"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangePosition"",
                    ""type"": ""Button"",
                    ""id"": ""28813769-dfc6-468c-b6f4-9ef7e984028d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""986c4b44-f0a8-4955-ae77-68b5c58d541c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d5731111-de6e-4413-a7ca-f72556ca8c9c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6e8b4655-13bb-4c14-9505-1c6b052ec903"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7a875f17-2704-4026-ab6f-f7ea99d8d35c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""51659510-c447-478b-9372-7705328008b6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4de2e31b-773f-479b-bd44-0eb558708cda"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42ff53bb-c258-4b87-80ce-dcd76fce130b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""ChangePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""051ea9ec-033b-411d-b2b6-fd72e50d3460"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""ChangePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a31355ab-5807-44ce-b8e0-def753109db4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""ChangePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5747098e-a68c-4e80-b9fb-b97093991702"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Strategy"",
                    ""action"": ""ChangePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC Strategy"",
            ""bindingGroup"": ""PC Strategy"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Cursor
        m_Cursor = asset.FindActionMap("Cursor", throwIfNotFound: true);
        m_Cursor_MainClick = m_Cursor.FindAction("MainClick", throwIfNotFound: true);
        m_Cursor_MoveClick = m_Cursor.FindAction("MoveClick", throwIfNotFound: true);
        m_Cursor_CursorPosition = m_Cursor.FindAction("CursorPosition", throwIfNotFound: true);
        // HotKeys
        m_HotKeys = asset.FindActionMap("HotKeys", throwIfNotFound: true);
        m_HotKeys_IsOrderToQueue = m_HotKeys.FindAction("IsOrderToQueue", throwIfNotFound: true);
        // CameraControl
        m_CameraControl = asset.FindActionMap("CameraControl", throwIfNotFound: true);
        m_CameraControl_CameraMove = m_CameraControl.FindAction("CameraMove", throwIfNotFound: true);
        m_CameraControl_CameraZoom = m_CameraControl.FindAction("CameraZoom", throwIfNotFound: true);
        m_CameraControl_ChangePosition = m_CameraControl.FindAction("ChangePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cursor
    private readonly InputActionMap m_Cursor;
    private ICursorActions m_CursorActionsCallbackInterface;
    private readonly InputAction m_Cursor_MainClick;
    private readonly InputAction m_Cursor_MoveClick;
    private readonly InputAction m_Cursor_CursorPosition;
    public struct CursorActions
    {
        private @Controller m_Wrapper;
        public CursorActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @MainClick => m_Wrapper.m_Cursor_MainClick;
        public InputAction @MoveClick => m_Wrapper.m_Cursor_MoveClick;
        public InputAction @CursorPosition => m_Wrapper.m_Cursor_CursorPosition;
        public InputActionMap Get() { return m_Wrapper.m_Cursor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CursorActions set) { return set.Get(); }
        public void SetCallbacks(ICursorActions instance)
        {
            if (m_Wrapper.m_CursorActionsCallbackInterface != null)
            {
                @MainClick.started -= m_Wrapper.m_CursorActionsCallbackInterface.OnMainClick;
                @MainClick.performed -= m_Wrapper.m_CursorActionsCallbackInterface.OnMainClick;
                @MainClick.canceled -= m_Wrapper.m_CursorActionsCallbackInterface.OnMainClick;
                @MoveClick.started -= m_Wrapper.m_CursorActionsCallbackInterface.OnMoveClick;
                @MoveClick.performed -= m_Wrapper.m_CursorActionsCallbackInterface.OnMoveClick;
                @MoveClick.canceled -= m_Wrapper.m_CursorActionsCallbackInterface.OnMoveClick;
                @CursorPosition.started -= m_Wrapper.m_CursorActionsCallbackInterface.OnCursorPosition;
                @CursorPosition.performed -= m_Wrapper.m_CursorActionsCallbackInterface.OnCursorPosition;
                @CursorPosition.canceled -= m_Wrapper.m_CursorActionsCallbackInterface.OnCursorPosition;
            }
            m_Wrapper.m_CursorActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MainClick.started += instance.OnMainClick;
                @MainClick.performed += instance.OnMainClick;
                @MainClick.canceled += instance.OnMainClick;
                @MoveClick.started += instance.OnMoveClick;
                @MoveClick.performed += instance.OnMoveClick;
                @MoveClick.canceled += instance.OnMoveClick;
                @CursorPosition.started += instance.OnCursorPosition;
                @CursorPosition.performed += instance.OnCursorPosition;
                @CursorPosition.canceled += instance.OnCursorPosition;
            }
        }
    }
    public CursorActions @Cursor => new CursorActions(this);

    // HotKeys
    private readonly InputActionMap m_HotKeys;
    private IHotKeysActions m_HotKeysActionsCallbackInterface;
    private readonly InputAction m_HotKeys_IsOrderToQueue;
    public struct HotKeysActions
    {
        private @Controller m_Wrapper;
        public HotKeysActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @IsOrderToQueue => m_Wrapper.m_HotKeys_IsOrderToQueue;
        public InputActionMap Get() { return m_Wrapper.m_HotKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HotKeysActions set) { return set.Get(); }
        public void SetCallbacks(IHotKeysActions instance)
        {
            if (m_Wrapper.m_HotKeysActionsCallbackInterface != null)
            {
                @IsOrderToQueue.started -= m_Wrapper.m_HotKeysActionsCallbackInterface.OnIsOrderToQueue;
                @IsOrderToQueue.performed -= m_Wrapper.m_HotKeysActionsCallbackInterface.OnIsOrderToQueue;
                @IsOrderToQueue.canceled -= m_Wrapper.m_HotKeysActionsCallbackInterface.OnIsOrderToQueue;
            }
            m_Wrapper.m_HotKeysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @IsOrderToQueue.started += instance.OnIsOrderToQueue;
                @IsOrderToQueue.performed += instance.OnIsOrderToQueue;
                @IsOrderToQueue.canceled += instance.OnIsOrderToQueue;
            }
        }
    }
    public HotKeysActions @HotKeys => new HotKeysActions(this);

    // CameraControl
    private readonly InputActionMap m_CameraControl;
    private ICameraControlActions m_CameraControlActionsCallbackInterface;
    private readonly InputAction m_CameraControl_CameraMove;
    private readonly InputAction m_CameraControl_CameraZoom;
    private readonly InputAction m_CameraControl_ChangePosition;
    public struct CameraControlActions
    {
        private @Controller m_Wrapper;
        public CameraControlActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraMove => m_Wrapper.m_CameraControl_CameraMove;
        public InputAction @CameraZoom => m_Wrapper.m_CameraControl_CameraZoom;
        public InputAction @ChangePosition => m_Wrapper.m_CameraControl_ChangePosition;
        public InputActionMap Get() { return m_Wrapper.m_CameraControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlActions set) { return set.Get(); }
        public void SetCallbacks(ICameraControlActions instance)
        {
            if (m_Wrapper.m_CameraControlActionsCallbackInterface != null)
            {
                @CameraMove.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnCameraMove;
                @CameraMove.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnCameraMove;
                @CameraMove.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnCameraMove;
                @CameraZoom.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnCameraZoom;
                @CameraZoom.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnCameraZoom;
                @CameraZoom.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnCameraZoom;
                @ChangePosition.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnChangePosition;
                @ChangePosition.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnChangePosition;
                @ChangePosition.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnChangePosition;
            }
            m_Wrapper.m_CameraControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraMove.started += instance.OnCameraMove;
                @CameraMove.performed += instance.OnCameraMove;
                @CameraMove.canceled += instance.OnCameraMove;
                @CameraZoom.started += instance.OnCameraZoom;
                @CameraZoom.performed += instance.OnCameraZoom;
                @CameraZoom.canceled += instance.OnCameraZoom;
                @ChangePosition.started += instance.OnChangePosition;
                @ChangePosition.performed += instance.OnChangePosition;
                @ChangePosition.canceled += instance.OnChangePosition;
            }
        }
    }
    public CameraControlActions @CameraControl => new CameraControlActions(this);
    private int m_PCStrategySchemeIndex = -1;
    public InputControlScheme PCStrategyScheme
    {
        get
        {
            if (m_PCStrategySchemeIndex == -1) m_PCStrategySchemeIndex = asset.FindControlSchemeIndex("PC Strategy");
            return asset.controlSchemes[m_PCStrategySchemeIndex];
        }
    }
    public interface ICursorActions
    {
        void OnMainClick(InputAction.CallbackContext context);
        void OnMoveClick(InputAction.CallbackContext context);
        void OnCursorPosition(InputAction.CallbackContext context);
    }
    public interface IHotKeysActions
    {
        void OnIsOrderToQueue(InputAction.CallbackContext context);
    }
    public interface ICameraControlActions
    {
        void OnCameraMove(InputAction.CallbackContext context);
        void OnCameraZoom(InputAction.CallbackContext context);
        void OnChangePosition(InputAction.CallbackContext context);
    }
}
